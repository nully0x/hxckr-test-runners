name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy Node.js App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Install Dependencies and Build
        run: |
          npm install -g yarn
          yarn install
          yarn build

      # Create necessary directories first
      - name: Create Remote Directories
        run: |
          ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "mkdir -p ~/node-app/dist"

      # Then copy files
      - name: Copy Built Files to Droplet
        run: |
          scp -r dist/* ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }}:~/node-app/dist/
          scp package.json ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }}:~/node-app/
          scp yarn.lock ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }}:~/node-app/

      - name: Set Up .env File
        run: |
          ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "echo '${{ secrets.PROD_SECRET_FILE }}' > ~/node-app/.env"

      - name: Install Yarn and Run App
        run: |
          ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'EOF'
          if ! command -v yarn &> /dev/null; then
            echo "Installing Yarn..."
            npm install -g yarn
          fi

          cd ~/node-app

          yarn install --production

          if pm2 list | grep -q node-app; then
            echo "Restarting existing app..."
            pm2 restart node-app
          else
            echo "Starting new app..."
            pm2 start yarn --name node-app -- start
          fi
          pm2 save
          EOF
