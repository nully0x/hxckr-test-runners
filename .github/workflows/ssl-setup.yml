name: SSL Certificate Setup

on:
  workflow_dispatch:
    inputs:
      domain:
        description: "Domain name for SSL certificate"
        required: true
        type: string

jobs:
  ssl-setup:
    name: Setup SSL Certificate
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Install and Configure SSL
        run: |
          ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'EOF'
          # Install Certbot if not already installed
          if ! command -v certbot &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y certbot
          fi

          # Install and configure Nginx if not already installed
          if ! command -v nginx &> /dev/null; then
            sudo apt-get install -y nginx
          fi

          # Configure UFW (firewall)
          sudo ufw allow 80/tcp
          sudo ufw allow 443/tcp
          sudo ufw allow 'Nginx Full'

          # Make sure UFW is enabled
          sudo ufw --force enable

          # Stop any service that might be using port 80
          sudo systemctl stop nginx

          # Wait a bit for the port to be fully released
          sleep 5

          # Verify port 80 is free
          if netstat -tuln | grep ':80'; then
            echo "Warning: Port 80 is still in use"
            netstat -tuln | grep ':80'
          fi

          # Get SSL certificate with verbose output
          sudo certbot certonly --standalone \
            --preferred-challenges http \
            --agree-tos \
            --non-interactive \
            --verbose \
            --email ${{ secrets.SSL_EMAIL }} \
            -d ${{ github.event.inputs.domain }}

          # Verify certificate files exist
          if [ ! -d "/etc/letsencrypt/live/${{ github.event.inputs.domain }}" ]; then
            echo "Certificate directory not found!"
            exit 1
          fi

          # Create Nginx configuration with proper escaping
          sudo tee /etc/nginx/sites-available/${{ github.event.inputs.domain }} << CONF
          server {
              listen 80;
              server_name ${{ github.event.inputs.domain }};
              return 301 https://\$host\$request_uri;
          }

          server {
              listen 443 ssl;
              server_name ${{ github.event.inputs.domain }};

              ssl_certificate /etc/letsencrypt/live/${{ github.event.inputs.domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${{ github.event.inputs.domain }}/privkey.pem;

              # SSL configuration
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers off;
              ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384";

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          CONF

          # Remove default Nginx site if it exists
          sudo rm -f /etc/nginx/sites-enabled/default

          # Enable the site
          sudo ln -sf /etc/nginx/sites-available/${{ github.event.inputs.domain }} /etc/nginx/sites-enabled/

          # Test Nginx configuration
          sudo nginx -t

          # Start Nginx
          sudo systemctl start nginx

          # Verify Nginx is running
          sudo systemctl status nginx

          # Setup auto-renewal
          sudo certbot renew --dry-run
          EOF

      - name: Verify Setup
        run: |
          echo "SSL certificate setup completed for ${{ github.event.inputs.domain }}"
