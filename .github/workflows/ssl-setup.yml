name: SSL Certificate Setup

on:
  workflow_dispatch:
    inputs:
      domain:
        description: "Domain name for SSL certificate"
        required: true
        type: string

jobs:
  ssl-setup:
    name: Setup SSL Certificate
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Verify Domain and Setup SSL
        run: |
          ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'EOF'
          # First, let's check DNS resolution
          echo "Checking DNS resolution..."
          DOMAIN="${{ github.event.inputs.domain }}"
          DROPLET_IP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)
          DOMAIN_IP=$(dig +short $DOMAIN)

          echo "Droplet IP: $DROPLET_IP"
          echo "Domain IP: $DOMAIN_IP"

          if [ "$DROPLET_IP" != "$DOMAIN_IP" ]; then
            echo "WARNING: Domain is not pointing to this server!"
            echo "Please update DNS A record for $DOMAIN to point to $DROPLET_IP"
            exit 1
          fi

          # Check if ports are open
          echo "Checking if port 80 is available..."
          if netstat -tuln | grep ':80'; then
            echo "Port 80 is in use. Stopping potential services..."
            sudo systemctl stop nginx
            sleep 5
          fi

          # Configure firewall
          echo "Configuring firewall..."
          sudo ufw allow 80/tcp
          sudo ufw allow 443/tcp
          sudo ufw --force enable

          # Install required packages
          echo "Installing required packages..."
          sudo apt-get update
          sudo apt-get install -y certbot nginx

          # Attempt to get certificate with debugging
          echo "Attempting to obtain SSL certificate..."
          sudo certbot certonly --standalone \
            --preferred-challenges http \
            --agree-tos \
            --non-interactive \
            --verbose \
            --debug \
            --email ${{ secrets.SSL_EMAIL }} \
            -d $DOMAIN

          # Check certificate status
          if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
            echo "Certificate obtained successfully!"

            # Configure Nginx
            echo "Configuring Nginx..."
            sudo tee /etc/nginx/sites-available/$DOMAIN << CONF
          server {
              listen 80;
              server_name $DOMAIN;
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
              location / {
                  return 301 https://\$host\$request_uri;
              }
          }

          server {
              listen 443 ssl;
              server_name $DOMAIN;

              ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers off;

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          CONF

            # Enable the site
            sudo ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default

            # Test and restart Nginx
            sudo nginx -t && sudo systemctl restart nginx
          else
            echo "Certificate not obtained. Check /var/log/letsencrypt/letsencrypt.log for details"
            cat /var/log/letsencrypt/letsencrypt.log
            exit 1
          fi
          EOF

      - name: Verify Setup
        run: |
          echo "SSL certificate setup completed for ${{ github.event.inputs.domain }}"
